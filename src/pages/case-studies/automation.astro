---
import Layout from "@layouts/Layout.astro";
---

<Layout>
  <article class="max-w-5xl m-auto prose prose-invert prose-h2:mt-0 prose-headings:font-space grid grid-cols-1 gap-8 mt-24 mb-24 px-4">
    <!-- Header -->
    <header
      class="bg-gradient-to-r from-cyan-900/40 to-blue-900/20 border border-slate-700 rounded-xl p-8 shadow-xl backdrop-blur-sm drop-shadow-2xl"
      aria-labelledby="title"
    >
      <div class="uppercase tracking-widest font-semibold text-red-400 text-sm">
        Case Study
      </div>
      <h1 id="title" class="mt-2 text-4xl font-bold text-white mb-3 font-space #tracking-tight load-effect">
        Article Automation for Sitebulb
      </h1>
      <p class="mt-0 text-slate-300 text-lg mb-3">
        Streamlining the editorial pipeline from Google Docs to CMS in minutes.
      </p>
      <div
        class="inline-flex items-center gap-2 px-3 py-1 border border-slate-600 rounded-full text-sm text-slate-300 bg-slate-800/40"
      >
        Automation • Google Docs • CMS
      </div>
    </header>

    <!-- Optional image strip; replace src paths or remove -->
    <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:mx-0 lg:max-w-none lg:grid-cols-2 not-prose">
      <img src="/case-studies/automation/document.png" class="w-full rounded-xl object-cover outline-1 -outline-offset-1 outline-slate-700" />
      <img src="/case-studies/automation/load-document.png" class="w-full rounded-xl object-cover outline-1 -outline-offset-1 outline-slate-700" />
    </div>

    <!-- Problem -->
    <section aria-labelledby="problem-heading">
      <div class="bg-slate-900/40 border border-slate-700 rounded-lg p-6 shadow-lg backdrop-blur-sm">
        <h2 id="problem-heading" class="mt-0">The Problem</h2>
        <p class="text-slate-300">
          At Sitebulb, a significant portion of blog content was sourced from guest contributors who submitted drafts via Google Docs. Converting these raw documents into fully-published blog posts was a highly manual, time-consuming process. It involved:
        </p>
        <ul class="list-disc text-slate-300 space-y-2">
          <li>Copying and formatting content for the CMS</li>
          <li>Extracting and uploading images</li>
          <li>Pulling out quotes and embeds</li>
          <li>Creating author pages</li>
          <li>Generating social share images</li>
          <li>Adding jump links and related content manually</li>
        </ul>
        <p class="text-slate-300 mb-0">
          This process took up to <strong class="text-white">2 hours per article</strong>, which was not scalable for a growing content strategy. The goal was to design and build a system to <strong class="text-white">automate and accelerate</strong> this entire pipeline.
        </p>
      </div>
    </section>

    <!-- Solution -->
    <section aria-labelledby="solution-heading">
      <div class="bg-slate-900/40 border border-slate-700 rounded-lg p-6 shadow-lg backdrop-blur-sm">
        <h2 id="solution-heading" class="text-2xl font-semibold text-white mb-4">The Solution</h2>
        <p class="text-slate-300">
          A <strong class="text-white">custom admin interface</strong> was developed to take a Google Docs URL and turn it into a structured, CMS-ready article in a matter of minutes.
        </p>

        <h3 class="mt-6 text-xl font-semibold text-white">Key Features</h3>
        <ul class="list-disc text-slate-300 space-y-3 mb-0">
          <li>
            <strong class="text-white">Google Docs Parsing</strong><br />
            The user enters a Google Docs URL into the admin tool. Using Google Auth and the Google Docs + Drive APIs, the tool reads and processes the document contents.
          </li>
          <li>
            <strong class="text-white">Content Extraction &amp; Processing</strong><br />
            The parser loops through all document elements:
            <ul class="list-disc ml-5 mt-1 space-y-1">
              <li>Extracts structured content (headings, body, images, quotes)</li>
              <li>Caches and downloads inline images</li>
              <li>Pulls metadata such as authorship and embeds</li>
              <li>Strips out meta tags and unsupported formatting</li>
            </ul>
          </li>
          <li>
            <strong class="text-white">Custom Admin Interface</strong><br />
            Built with <strong class="text-white">Vite</strong>, <strong class="text-white">TypeScript</strong>, <strong class="text-white">React</strong>, <strong class="text-white">Shadcn</strong>, <strong class="text-white">React Query</strong>, and <strong class="text-white">Tailwind</strong>, the interface previews all parsed content for review and modification before publishing.
          </li>
          <li>
            <strong class="text-white">Dynamic Publishing Logic</strong><br />
            Once approved, the system:
            <ul class="list-disc ml-5 mt-1 space-y-1">
              <li>Creates new CMS entries if they don't already exist (e.g., authors, tags)</li>
              <li>Associates new content with existing references when available</li>
              <li>Transitions from manual jump link generation to JavaScript-powered embedding based on <code>&lt;h2&gt;</code> and <code>&lt;h3&gt;</code> elements</li>
            </ul>
          </li>
          <li>
            <strong class="text-white">Smart Related Content</strong><br />
            Hand-curated related articles were replaced with <strong class="text-white">tag-driven automation</strong>, improving editorial speed while maintaining relevance.
          </li>
          <li>
            <strong class="text-white">Social Share Image Generation</strong><br />
            Using <strong class="text-white">Playwright</strong>, the system auto-generates social images based on the article title, meta description, and thumbnail image.
          </li>
          <li>
            <strong class="text-white">Illustration Workflow</strong><br />
            At the time of implementation, <strong class="text-white">Sora</strong> (without a public API) was used to create thumbnails via manual prompting. Other AI alternatives were evaluated but did not meet quality standards.
          </li>
        </ul>
      </div>
    </section>

    <!-- Optional image strip; replace src paths or remove -->
    <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:mx-0 lg:max-w-none lg:grid-cols-2 not-prose">
      <img src="/case-studies/automation/preview.png" class="w-full rounded-xl object-cover outline-1 -outline-offset-1 outline-slate-700" />
      <img src="/case-studies/automation/published.png"º class="w-full rounded-xl object-cover outline-1 -outline-offset-1 outline-slate-700" />
    </div>

    <!-- Technologies Used -->
    <section aria-labelledby="tech-heading">
      <div class="bg-slate-900/40 border border-slate-700 rounded-lg p-6 shadow-lg backdrop-blur-sm">
        <h2 id="tech-heading" class="text-2xl font-semibold text-white mb-0">Technologies Used</h2>
        <div class="overflow-x-auto">
          <table class="table-auto border-collapse w-full text-left text-slate-300">
            <thead>
              <tr class="bg-slate-800/60">
                <th scope="col" class="border border-slate-700 px-4 py-2 font-semibold text-slate-200">Stack Area</th>
                <th scope="col" class="border border-slate-700 px-4 py-2 font-semibold text-slate-200">Tools &amp; Frameworks</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th scope="row" class="border border-slate-700 px-4 py-2 text-slate-200 font-medium">Frontend</th>
                <td class="border border-slate-700 px-4 py-2">Vite, TypeScript, React, Shadcn, React Query, Tailwind</td>
              </tr>
              <tr>
                <th scope="row" class="border border-slate-700 px-4 py-2 text-slate-200 font-medium">Backend / CMS</th>
                <td class="border border-slate-700 px-4 py-2">Umbraco (C#), custom APIs</td>
              </tr>
              <tr>
                <th scope="row" class="border border-slate-700 px-4 py-2 text-slate-200 font-medium">Automation</th>
                <td class="border border-slate-700 px-4 py-2">Google Docs &amp; Drive APIs, Google Auth</td>
              </tr>
              <tr>
                <th scope="row" class="border border-slate-700 px-4 py-2 text-slate-200 font-medium">Testing / Assets</th>
                <td class="border border-slate-700 px-4 py-2">Playwright (tests + image automation)</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- Impact -->
    <section aria-labelledby="impact-heading">
      <div class="bg-slate-900/40 border border-slate-700 rounded-lg p-6 shadow-lg backdrop-blur-sm">
        <h2 id="impact-heading" class="mt-0">Impact</h2>
        <p class="text-slate-300 mb-0">
          This solution reduced editorial production time by <strong class="text-white">over 85%</strong>—from approximately 2 hours down to <strong class="text-white">just 15 minutes per article</strong>. The automation not only saved time but also improved content consistency, ensured better SEO hygiene (thanks to structured metadata), and allowed the content team to focus more on quality and strategy rather than tedious formatting.
        </p>
      </div>
    </section>
  </article>
</Layout>
